name: Python Asterix Library

on: [push]

jobs:
  pycodestyle:
    runs-on: ubuntu-latest
    env:
      python-version: '3.x'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pycodestyle

      - name: Check code with pycodestyle
        run: |
          pycodestyle *.py --exclude='venv/*'

  pydocstyle:
    runs-on: ubuntu-latest
    env:
      python-version: '3.x'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pydocstyle
      - name: Check docstrings with pydocstyle
        run: |
          pydocstyle *.py

  pylint:
    runs-on: ubuntu-latest
    env:
      python-version: '3.x'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
      - name: Check code with pylint
        run: |
          pylint *.py

  mypy:
    runs-on: ubuntu-latest
    env:
      python-version: '3.x'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy
      - name: Analyze code with mypy
        run: |
          mypy --strict *.py

  vulture:
    runs-on: ubuntu-latest
    env:
      python-version: '3.x'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install vulture
      - name: Check dead code with vulture
        run: |
          vulture *.py

  xenon:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install xenon
      - name: Check code complexity with xenon
        run: |
          xenon --max-absolute=A *.py

  unittest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run unit tests
        run: |
          python -m unittest discover

